// Code generated by protoc-gen-go.
// source: devicepresence.proto
// DO NOT EDIT!

/*
Package devicepresence is a generated protocol buffer package.

It is generated from these files:
	devicepresence.proto

It has these top-level messages:
	StatusRequest
	StatusReply
	Device
*/
package devicepresence

import proto "github.com/protogalaxy/service-socket/Godeps/_workspace/src/github.com/golang/protobuf/proto"

import (
	context "github.com/protogalaxy/service-socket/Godeps/_workspace/src/golang.org/x/net/context"
	grpc "github.com/protogalaxy/service-socket/Godeps/_workspace/src/google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Device_Type int32

const (
	Device_WS Device_Type = 0
)

var Device_Type_name = map[int32]string{
	0: "WS",
}
var Device_Type_value = map[string]int32{
	"WS": 0,
}

func (x Device_Type) String() string {
	return proto.EnumName(Device_Type_name, int32(x))
}

type Device_Status int32

const (
	Device_ONLINE  Device_Status = 0
	Device_OFFLINE Device_Status = 1
)

var Device_Status_name = map[int32]string{
	0: "ONLINE",
	1: "OFFLINE",
}
var Device_Status_value = map[string]int32{
	"ONLINE":  0,
	"OFFLINE": 1,
}

func (x Device_Status) String() string {
	return proto.EnumName(Device_Status_name, int32(x))
}

type StatusRequest struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *StatusRequest) Reset()         { *m = StatusRequest{} }
func (m *StatusRequest) String() string { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()    {}

func (m *StatusRequest) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type StatusReply struct {
}

func (m *StatusReply) Reset()         { *m = StatusReply{} }
func (m *StatusReply) String() string { return proto.CompactTextString(m) }
func (*StatusReply) ProtoMessage()    {}

type Device struct {
	Id     string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type   Device_Type   `protobuf:"varint,2,opt,name=type,enum=devicepresence.Device_Type" json:"type,omitempty"`
	UserId string        `protobuf:"bytes,3,opt,name=user_id" json:"user_id,omitempty"`
	Status Device_Status `protobuf:"varint,4,opt,name=status,enum=devicepresence.Device_Status" json:"status,omitempty"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("devicepresence.Device_Type", Device_Type_name, Device_Type_value)
	proto.RegisterEnum("devicepresence.Device_Status", Device_Status_name, Device_Status_value)
}

// Client API for PresenceManager service

type PresenceManagerClient interface {
	SetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
}

type presenceManagerClient struct {
	cc *grpc.ClientConn
}

func NewPresenceManagerClient(cc *grpc.ClientConn) PresenceManagerClient {
	return &presenceManagerClient{cc}
}

func (c *presenceManagerClient) SetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/devicepresence.PresenceManager/SetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PresenceManager service

type PresenceManagerServer interface {
	SetStatus(context.Context, *StatusRequest) (*StatusReply, error)
}

func RegisterPresenceManagerServer(s *grpc.Server, srv PresenceManagerServer) {
	s.RegisterService(&_PresenceManager_serviceDesc, srv)
}

func _PresenceManager_SetStatus_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(StatusRequest)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PresenceManagerServer).SetStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _PresenceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "devicepresence.PresenceManager",
	HandlerType: (*PresenceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetStatus",
			Handler:    _PresenceManager_SetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
